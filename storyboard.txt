[Java]
1. Drag&drop Java 14 support from Marketplace
2. References to Web support in EE package shown later
3. [Java editor]
  1. [content assist][subtype aware]
     - List<String> list = new a|
     - List<String> list; list = new a|
     - Iterator<String> iter = Collections.|
     - foo(new h|)
     - foo(Collections.|)
  2. [content assist][subword matches]
     - System.out.println("hello".upcase|);
     - Window > Preferences: Java > Editor > Content Assist: Show subword matches
     - "hello".upcase
     - "hello".tocase (omit words)
     - "hello".tupca (omit word endings)
  3. [annotation-based null analysis]
     - Project > Properties: Java Compiler > Errors/Warnings: Null analysis > Enable annotation-based null analysis
     - List<@NonNull String> list = new ArrayList<>();
     - list.add(null); => list.add("");
     - List<@NonNull String> list = Legacy.getList(); => undo to: new ArrayList<>();
     - Legacy.foo(list); for ...
     - run -> NPE
     - New Check -configure severity-> Unsafe conversion of annotated parameterized type to less-annotated type
  4. [resource leak analysis]
     - new PrintWriter("out.txt").append("text").close();
     - Shift+hovering "append"
     - Enable potential resource leak checking
     - ZipFile zipFile = Storage.getZipFile();
     - // ...
       String comment = zipFile.getComment();
  5. [Surround With: Try-with-resources Block]
     - select and right-click...
  6. [quick fix][Wrap with Optional]
     - Optional<String> comment = zipFile.getComment();
     [quick fix][Missing/duplicate @provides/@uses]
     - Go to "module-info.java"
     - Enable Javadoc warning
     - Remove duplicate "@uses FileSystemProvider"
     - Add missing "@uses Chronology"
4. [clean up]
   - [Unnecessary Code] Operate on Maps directly
   - [Code Style] Simplify lambda expression
   - [Code Style] Use uppercase for long literal suffix
5. [debug]
   - List<String> list = List.of("a", " ");
     System.out.println(list.size());
   - Set breakpoint + condition: list.stream().anyMatch(s -> s.isBlank())
   - Debug
   - In Expression view add: list.stream().anyMatch(String::isBlank)
6. [console]
   - End time
   - Form feed (\f) and vertical tab (\u000b):
     System.out.println("Step\fby\u000bstep");
   - Run
   - Window > Preferences: Run/Debug > Console: Interprete ASCII control characters
   - Re-run

[Git]
1. [Select a Commit dialog with search field]
   - Right-click + Compare With > Commit...
   - "content assist"
2. [Repository Groups: Right-click menu with Switch Repositories To and Pull]
   - Switch to Git perspective
   - Select egit+jgit; view menu: New Repository Group; "JGit/EGit"
   - Right-click: "Switch Repositories To"
   - ... "Pull"
3. [Dynamic label for Push to/Fetch from Upstream]
   - Right-click egit repository: "Push to eclipse" + "Fetch from eclipse"
4. [Git Repositories view: Comparing Branches and Tags]
   - Select 1 tab + 1 branch; right-click
5. [History view: Show Unified Diff]
   - Right-click again; go to History view; select 2 commits; right-click+"Show Unified Diff"
   - File > Save As...

[Web]
 - Help > Eclipse Marketplace: "Wild Web"
 - Switch to JEE IDE
 - Double-click "sample.html"
1. [Drag'n'drop also in WTP editors: XML, HTML]
   - "Eclipse Wild Developer Web" => "Eclipse Wild Web Developer"
   - Right-click + Open With > Generic Editor
   - Close old editor
2. [supported languages/formats]
   - style.scss + style.less: hover variable + collapse
   - TypeScript: Angular_Sample/src/test.ts
   - Angular: Angular_Sample/src/app/app.component.ts
   - React: React_Sample/src/component/App.js
   - "sample.html" > Close Others; $('#counter').cli
3. [language servers]
   - Preferences: Language Servers
4. [features]
   - syntax highlighting
   - code completion
     document.byid
   - navigating
   - renaming
   - and finding references
